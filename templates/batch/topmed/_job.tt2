OUT_DIR=[% bam.results_dir %]
RUN_DIR=[% settings.run_dir %]
REF_DIR=[% gotcloud.ref_dir %]
PROJECT_DIR=[% settings.project_dir %]
DELAY=[% settings.delay %]

JOB_LOG=[% settings.job_log %]

ALIGN_THREADS=[% settings.threads %]

SAMPLE_ID=[% bam.sample_id %]
BAM_CENTER=[% bam.center %]
BAM_FILE=[% bam.path %]
BAM_PI=[% bam.pi %]
BAM_HOST=[% bam.host %]
BAM_PIPELINE=[% settings.pipeline %]

GOTCLOUD_ROOT=[% gotcloud.root %]
GOTCLOUD_CONF=[% gotcloud.conf %]

TMP_DIR="${TMP_DIR}/${JOB_ID}"
FASTQ_LIST="${TMP_DIR}/fastq.list"
BAM_LIST="${TMP_DIR}/bam.list"

echo "
[$(date)] Starting remapping pipeline

OUT_DIR:      $OUT_DIR
TMP_DIR:      $TMP_DIR
REF_DIR:      $REF_DIR
RUN_DIR:      $RUN_DIR
BAM:          $BAM_FILE
BAM_ID:       $BAM_ID
BAM_CENTER:   $BAM_CENTER
BAM_LIST:     $BAM_LIST
BAM_PI:       $BAM_PI
BAM_HOST:     $BAM_HOST
BAM_PIPELINE: $BAM_PIPELINE
FASTQ_LIST:   $FASTQ_LIST
NODE:         $NODELIST
JOBID:        $JOB_ID
GOTCLOUD:     $(which gotcloud)
GC_CONF:      $GOTCLOUD_CONF
GC_ROOT:      $GOTCLOUD_ROOT
"

export PERL_CARTON_PATH=${PROJECT_DIR}/local
export PERL5LIB=${PERL_CARTON_PATH}/lib/perl5:${PROJECT_DIR}/lib/perl5:$PERL5LIB
export PATH=${GOTCLOUD_ROOT}:${PROJECT_DIR}/bin:${PATH}

if [ -e $OUT_DIR ]; then
  echo "[$(date)] Found existing OUT_DIR deleting"
  rm -rfv $OUT_DIR

  if [ $? -ne 0 ]; then
    echo "[$(date)] Failed to remove existing OUT_DIR"
    exit 1
fi

echo "[$(date)] Creating OUT_DIR and TMP_DIR"
mkdir -p $OUT_DIR $TMP_DIR

if [ $? -ne 0 ]; then
  echo "[$(date)] Failed to create OUT_DIR and or TMP_DIR"
  exit 1
fi

echo "[$(date)] Setting permissions on TMP_DIR"
chmod 750 $TMP_DIR

if [ $? -ne 0 ]; then
  echo "[$(date)] Failed to set permissions on TMP_DIR"
  exit 1
fi

echo "[$(date)] Creating BAM_LIST"
echo "$BAM_ID $BAM_FILE" > $BAM_LIST

# TODO - there has got to be a better way
#      - make csg-mapper emit a yaml logfile of the job meta data?
# csg-mapper show --job-id $JOB_ID --info > $JOB_LOG
echo "[$(date)] Recording job info"
echo "---" >> $JOB_LOG
echo "  start: $(date)" >> $JOB_LOG
echo "  jobid: $JOB_ID" >> $JOB_LOG
echo "  out_dir: $OUT_DIR" >> $JOB_LOG
echo "  tmp_dir: $TMP_DIR" >> $JOB_LOG
echo "  ref_dir: $REF_DIR" >> $JOB_LOG
echo "  run_dir: $RUN_DIR" >> $JOB_LOG
echo "  pipeline: $BAM_PIPELINE" >> $JOB_LOG
echo "  gc_conf: $GOTCLOUD_CONF" >> $JOB_LOG
echo "  gc_root: $GOTCLOUD_ROOT" >> $JOB_LOG
echo "  gotcloud: $(which gotcloud)" >> $JOB_LOG
echo "  delay: $DELAY" >> $JOB_LOG
echo "  bam: $BAM_FILE" >> $JOB_LOG
echo "  bam_id: $BAM_ID" >> $JOB_LOG
echo "  bam_center: $BAM_CENTER" >> $JOB_LOG
echo "  bam_list: $BAM_LIST" >> $JOB_LOG
echo "  bam_pi: $BAM_PI" >> $JOB_LOG
echo "  bam_host: $BAM_HOST" >> $JOB_LOG
echo "  fastq_list: $FASTQ_LIST" >> $JOB_LOG
echo "  cluster: csg" >> $JOB_LOG
echo "  node: $NODELIST" >> $JOB_LOG

if [ ! -z $DELAY ]; then
  echo "[$(date)] Delaying execution for ${DELAY} minutes"
  sleep "${DELAY}m"
fi

echo "[$(date)] Beginning gotcloud pipeline"
gotcloud pipe              \
  --gcroot  $GOTCLOUD_ROOT \
  --name    $BAM_PIPELINE      \
  --conf    $GOTCLOUD_CONF \
  --numjobs 1              \
  --ref_dir $REF_DIR       \
  --outdir  $TMP_DIR

rc=$?

echo "  pipe_rc: $rc" >> $JOB_LOG

if [ "$rc" -ne 0 ]; then
  echo "[$(date)] $BAM_PIPELINE failed with exit code $rc" 1>&2
  csg-mapper update --job-id $JOB_ID --state failed
else
  echo "[$(date)] Begining gotcloud alignment"
  gotcloud align                      \
    --gcroot       $GOTCLOUD_ROOT     \
    --conf         $GOTCLOUD_CONF     \
    --threads      $ALIGN_THREADS     \
    --outdir       $OUT_DIR           \
    --fastqlist    $FASTQ_LIST        \
    --override     "TMP_DIR=$TMP_DIR" \
    --ref_dir      $REF_DIR           \
    --maxlocaljobs $ALIGN_THREADS

  rc=$?
  echo "  align_rc: $rc" >> $JOB_LOG

  if [ "$rc" -ne 0 ]; then
    echo "[$(date)] Alignment failed with exit code $rc" 1>&2
    csg-mapper update --job-id $JOB_ID --state failed
  else
    echo "[$(date)] Alignment completed"
    csg-mapper update --job-id $JOB_ID --state failed
  fi
fi

if [ "$rc" -ne 0 ]; then
  echo "[$(date)] Alignment failed, moving TMP_DIR to RUN_DIR"
  mv $TMP_DIR $RUN_DIR

  max_runs=[% settings.max_failed_runs %]
  run_count=$(find $RUN_DIR -maxdepth 1 -type d|wc -l)
  runs=$(find $RUN_DIR/* -maxdepth 1 -type d|sort)

  if [ $run_count -gt $max_runs ]; then
    count=0
    for run in $runs; do
      if [ $(($run_count - $max_runs)) -gt $count ]; then
        echo "[$(date)] Purging run [$(basename $run)] from RUN_DIR"
        rm -rf $run
      fi

      count=$(($count + 1))
    done
  fi
else
  echo "[$(date)] Purging $TMP_DIR on $NODELIST"
  rm -rf $TMP_DIR
fi

echo "[$(date)] Exiting [RC: $rc]"
echo "  end: $(date)" >> $JOB_LOG

# TODO - record job end time
#      - record exit code as well

exit $rc

# vi: ft=sh

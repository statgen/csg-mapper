OUT_DIR=[% bam.results_dir %]
RUN_DIR=[% settings.run_dir %]
REF_DIR=[% gotcloud.ref_dir %]
PROJECT_DIR=[% settings.project_dir %]
DELAY=[% settings.delay %]

JOB_LOG=[% settings.job_log %]

ALIGN_THREADS=[% settings.threads %]

SAMPLE_ID=[% bam.sample_id %]
BAM_CENTER=[% bam.center %]
BAM_FILE=[% bam.bam %]
BAM_PI=[% bam.pi %]
BAM_HOST=[% bam.host %]
BAM_PIPELINE=[% settings.pipeline %]

GOTCLOUD_ROOT=[% gotcloud.root %]
GOTCLOUD_CONF=[% gotcloud.conf %]

TMP_DIR="${TMP_DIR}/${JOB_ID}"
FASTQ_LIST="${TMP_DIR}/fastq.list"
BAM_LIST="${TMP_DIR}/bam.list"

export PERL_CARTON_PATH=${PROJECT_DIR}/local
export PERL5LIB=${PERL_CARTON_PATH}/lib/perl5:${PROJECT_DIR}/lib/perl5:$PERL5LIB
export PATH=${GOTCLOUD_ROOT}:${PROJECT_DIR}/bin:${PATH}

mapper update --meta-id [% settings.meta_id %] --start --job-id $JOB_ID --node $NODELIST
mapper log --meta-id [% settings.meta_id %] --message 'starting remapping pipeline'

echo "
OUT_DIR:      $OUT_DIR
TMP_DIR:      $TMP_DIR
REF_DIR:      $REF_DIR
RUN_DIR:      $RUN_DIR
BAM:          $BAM_FILE
BAM_ID:       $BAM_ID
BAM_CENTER:   $BAM_CENTER
BAM_LIST:     $BAM_LIST
BAM_PI:       $BAM_PI
BAM_HOST:     $BAM_HOST
BAM_PIPELINE: $BAM_PIPELINE
FASTQ_LIST:   $FASTQ_LIST
NODE:         $NODELIST
JOBID:        $JOB_ID
GOTCLOUD:     $(which gotcloud)
GC_CONF:      $GOTCLOUD_CONF
GC_ROOT:      $GOTCLOUD_ROOT
"

if [ -e $OUT_DIR ]; then
  mapper log --meta-id [% settings.meta_id %] --message 'found existing OUT_DIR deleting'
  rm -rfv $OUT_DIR

  if [ $? -ne 0 ]; then
    echo "[$(date)] Failed to remove existing OUT_DIR"
    mapper log --meta-id [% settings.meta_id %] --message 'failed to remove existing OUT_DIR' --critical
    mapper update --meta-id [% settings.meta_id %] --state failed
    exit 1
fi

mapper log --meta-id [% settings.meta_id %] --message 'creating OUT_DIR and TMP_DIR'
mkdir -p $OUT_DIR $TMP_DIR

if [ $? -ne 0 ]; then
  mapper log --meta-id [% setings.meta_id %] --message 'failed to create OUT_DIR and or TMP_DIR' --critical
  mapper update --meta-id [% settings.meta_id %] --state failed
  exit 1
fi

mapper log --meta-id [% settings.meta_id %] --message 'setting permissions on TMP_DIR'
chmod 750 $TMP_DIR

if [ $? -ne 0 ]; then
  mapper log --meta-id [% settings.meta_id %] --message 'failed to set permissions on TMP_DIR' --critical
  mapper update --meta-id [% settings.meta_id %] --state failed
  exit 1
fi

mapper log --meta-id [% settings.meta_id %] --message 'creating BAM_LIST'
echo "$BAM_ID $BAM_FILE" > $BAM_LIST

if [ ! -z $DELAY ]; then
  mapper log --meta-id [% settings.meta_id %] --message "delaying execution for $DELAY minutes"
  sleep "${DELAY}m"
fi

mapper show --meta-id [% settings.meta_id %] --info > $JOB_LOG
mapper log --meta-id [% settings.meta_id %] --message 'beginning bam2fastq pipeline'
gotcloud pipe              \
  --gcroot  $GOTCLOUD_ROOT \
  --name    $BAM_PIPELINE      \
  --conf    $GOTCLOUD_CONF \
  --numjobs 1              \
  --ref_dir $REF_DIR       \
  --outdir  $TMP_DIR

rc=$?
mapper log --meta-id [% settings.meta_id %] --message "pipe_rc: $rc"

if [ "$rc" -ne 0 ]; then
  mapper log --meta-id [% settings.meta_id %] --message "$BAM_PIPELINE failed with exit code $rc" --critical
  mapper update --meta-id [% settings.meta_id %] --state failed --exit-code $rc
else
  mapper log --meta-id [% settings.meta_id %] --message 'begining gotcloud alignment'
  gotcloud align                      \
    --gcroot       $GOTCLOUD_ROOT     \
    --conf         $GOTCLOUD_CONF     \
    --threads      $ALIGN_THREADS     \
    --outdir       $OUT_DIR           \
    --fastqlist    $FASTQ_LIST        \
    --override     "TMP_DIR=$TMP_DIR" \
    --ref_dir      $REF_DIR           \
    --maxlocaljobs $ALIGN_THREADS

  rc=$?
  mapper log --meta-id [% settings.meta_id %] --message "align_rc: $rc"

  if [ "$rc" -ne 0 ]; then
    mapper update --meta-id [% settings.meta_id %] --state failed --exit-code $rc
    mapper log --meta-id [% settings.meta_id %] --message "alignment failed with exit code $rc" --critical
  else
    mapper update --meta-id [% settings.meta_id %] --state failed --exit-code $rc
    mapper log --meta-id [% settings.meta_id %] --message 'alignment completed'
  fi
fi

if [ "$rc" -ne 0 ]; then
  mapper log --meta-id [% settings.meta_id %] --message 'alignment failed, moving TMP_DIR to RUN_DIR' --critical
  mv $TMP_DIR $RUN_DIR

  max_runs=[% settings.max_failed_runs %]
  run_count=$(find $RUN_DIR -maxdepth 1 -type d|wc -l)
  runs=$(find $RUN_DIR/* -maxdepth 1 -type d|sort)

  if [ $run_count -gt $max_runs ]; then
    count=0
    for run in $runs; do
      if [ $(($run_count - $max_runs)) -gt $count ]; then
        mapper log --meta-id [% settings.meta_id %] --message "purging run [$(basename $run)] from RUN_DIR"
        rm -rf $run
      fi

      count=$(($count + 1))
    done
  fi
else
  mapper log --meta-id [% settings.meta_id %] --message "purging $TMP_DIR on $NODELIST"
  rm -rf $TMP_DIR
fi

mapper log --meta-id [% settings.meta_id %] --message "remapping complete: $rc"
mapper update --meta-id [% settings.meta_id %] --state completed --exit-code $rc

exit $rc

# vi: ft=sh

#!/bin/sh

[% IF settings.cluster == 'csg' -%]
#SBATCH --nodes=1
#SBATCH --cpus-per-task=[% job.procs %]
#SBATCH --mem=[% job.memory %]
#SBATCH --gres=tmp:200
#SBATCH --time=[% job.walltime %]
#SBATCH --workdir=[% job.workdir %]
#SBATCH --partition=topmed
#SBATCH --mail-type=FAIL
#SBATCH --mail-user=[% job.email %]
#SBATCH --job-name=[% job.job_name %]

JOB_ID=$SLURM_JOB_ID
NODELIST=$SLURM_JOB_NODELIST
[% ELSIF settings.cluster == 'flux' -%]
#PBS -l nodes=1:ppn=[% job.procs %]
#PBS -l walltime=[% job.walltime %]
#PBS -l pmem=[% job.memory %]gb
#PBS -l ddisk=200gb
#PBS -m a
#PBS -d [% job.workdir %]
#PBS -M [% job.email %]
#PBS -q flux
#PBS -l qos=flux
#PBS -A [% job.account %]
#PBS -V
#PBS -j oe
#PBS -N [% job.job_name %]

JOB_ID=$PBS_JOBID
NODELIST=$(cat $PBS_NODEFILE)
[% END -%]

META_ID=[% settings.meta_id %]
MAPPER_CMD=[% settings.mapper_cmd %]
MAPPER_LOG_CMD="$MAPPER_CMD log --meta-id $META_ID"
MAPPER_UPDATE_CMD="$MAPPER_CMD update --meta-id $META_ID"

TMP_DIR=[% settings.tmp_dir %]/[% sample.sample_id %]
RUN_DIR=[% settings.run_dir %]

export PERL_CARTON_PATH=[% settings.project_dir %]/local
export PERL5LIB=${PERL_CARTON_PATH}/lib/perl5:[% settings.project_dir %]/lib/perl5:${PERL5LIB}
export PATH=[% settings.project_dir %]/bin:${PERL_CARTON_PATH}/bin:${PATH}

$MAPPER_UPDATE_CMD --start --job-id $JOB_ID --node $NODELIST --step bam2fastq

$MAPPER_LOG_CMD --message 'starting remapping pipeline'

if [ -e $TMP_DIR ]; then
  $MAPPER_LOG_CMD --message 'removing existing TMP_DIR'
  rm -rf $TMP_DIR
fi

$MAPPER_LOG_CMD --message 'creating TMP_DIR'
mkdir -p $TMP_DIR

if [ $? -ne 0 ]; then
  $MAPPER_LOG_CMD --message 'failed to create TMP_DIR' --level critical
  $MAPPER_UPDATE_CMD --state failed
  exit 1
fi

$MAPPER_LOG_CMD --message 'setting permissions on TMP_DIR'
chmod 750 $TMP_DIR

if [ $? -ne 0 ]; then
  $MAPPER_LOG_CMD --message 'failed to set permissions on TMP_DIR' --level critical
  $MAPPER_UPDATE_CMD --state failed
  exit 1
fi

$MAPPER_LOG_CMD --message 'creating bam.list'
echo "[% sample.sample_id %] [% sample.incoming_path %]" > "${TMP_DIR}/bam.list"

$MAPPER_LOG_CMD --message "delaying execution for [% settings.delay %] minutes"
sleep "[% settings.delay %]m"

$MAPPER_CMD show --meta-id $META_ID --info > [% settings.job_log %]
$MAPPER_LOG_CMD --message 'beginning bam2fastq pipeline'

[% gotcloud.cmd %] pipe \
  --gcroot  [% gotcloud.root %] \
  --name    [% settings.pipeline %] \
  --conf    [% gotcloud.conf %] \
  --numjobs 1 \
  --ref_dir [% gotcloud.ref_dir %] \
  --outdir  $TMP_DIR

rc=$?
$MAPPER_LOG_CMD --message "pipe_rc: $rc"

if [ "$rc" -eq 0 ]; then
  $MAPPER_LOG_CMD --message "[% settings.pipeline %] completed with exit code $rc"
  $MAPPER_UPDATE_CMD --state completed --exit-code $rc
  $MAPPER_CMD launch --verbose --project [% settings.project %] --cluster [% settings.cluster %] --meta-id $META_ID --step align
else
  $MAPPER_LOG_CMD --message "[% settings.pipeline %] failed with exit code $rc" --level critical
  $MAPPER_UPDATE_CMD --state failed --exit-code $rc

  if [ ! -e $RUN_DIR ]; then
    $MAPPER_LOG_CMD --message 'RUN_DIR does not exist' --level critical
    exit $rc
  fi

  $MAPPER_LOG_CMD --message 'moving TMP_DIR to RUN_DIR'
  mv $TMP_DIR $RUN_DIR

  if [ $? -ne 0 ]; then
    $MAPPER_LOG_CMD --mesage 'failed to move TMP_DIR to RUN_DIR' --level critical
    exit $rc
  fi

  max_runs=[% settings.max_failed_runs %]
  run_count=$(find $RUN_DIR -maxdepth 1 -type d|wc -l)
  runs=$(find $RUN_DIR/* -maxdepth 1 -type d|sort)

  if [ $run_count -gt $max_runs ]; then
    count=0
    for run in $runs; do
      if [ $(($run_count - $max_runs)) -gt $count ]; then
        $MAPPER_LOG_CMD --message "purging sample [$(basename $run)] from RUN_DIR"
        rm -rf $run
      fi

      count=$(($count + 1))
    done
  fi
fi

exit $rc

# vi: ft=sh
